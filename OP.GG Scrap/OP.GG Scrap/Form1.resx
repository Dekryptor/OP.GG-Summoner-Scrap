<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        0Uhuwr5WAAAAAElFTkSuQmCC
</value>
  </data>
</root>